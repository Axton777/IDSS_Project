using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;

public class Grids : MonoBehaviour
{
    public GameObject itemUI;
    public GameObject obstacle;
    public GameObject grass;
    public GameObject small_Enemy;
    public GameObject mid_Enemy;
    public GameObject big_Enemy;
    public GameObject wall;
    public GameObject mud;
    public GameObject player;
    public GameObject target;
    public bool displayGridGizmos;
    public LayerMask unwalkableMask;
    public Vector2 gridWorldSize;
    public float nodeRadius;
    public TerrainType[] walkableRegions;
    LayerMask walkableMask;
    Dictionary<int, int> walkableRegionsDictionary = new Dictionary<int, int>();
    Node[,] grid;
    bool proceedPressed = false;
    bool itemSelected = false;
    float nodeDiameter;
    int gridSizeX, gridSizeY;

    void Awake()
    {
        if (proceedPressed)
        {
            nodeDiameter = nodeRadius * 2;
            gridSizeX = Mathf.RoundToInt(gridWorldSize.x / nodeDiameter);
            gridSizeY = Mathf.RoundToInt(gridWorldSize.y / nodeDiameter);

            foreach (TerrainType region in walkableRegions)
            {
                walkableMask.value |= region.terrainMask.value;
                walkableRegionsDictionary.Add((int)Mathf.Log(region.terrainMask.value, 2), region.energyPenalty + region.healthPenalty);
            }
            CreateGrid();
        }  
    }

    public void proceedBtnHandler(int area)
    {
        if (area == 5)
            nodeRadius = 6;
        else if (area == 10)
            nodeRadius = 3;
        else if (area == 15)
            nodeRadius = 2;
        else if (area == 20)
            nodeRadius = 1.5f;
        else if (area == 25)
            nodeRadius = 1.2f;
        else if (area == 30)
            nodeRadius = 1;
        proceedPressed = true;
        Awake();
        GameObject mapGeneratorUI = GameObject.Find("mapGeneratorUI");
        mapGeneratorUI.SetActive(false);
        itemUI.SetActive(true);
    }

    public void itemPlacementHandler(GameObject _obstacle)
    {
        obstacle = _obstacle;
        Text selected = GameObject.Find("Selected").GetComponent<Text>();
        selected.text = "Selected : " + _obstacle.name;
        itemSelected = true;
    }

    public void goPathfind()
    {
        Unit unit = GameObject.Find("Seeker").GetComponent<Unit>();
        unit.goPathfind(true);
    }

    private void Update()
    {
        if (proceedPressed && itemSelected)
        {
            if (Input.GetMouseButtonDown(0))
              UpdateGrid();
        }
    }

    public int MaxSize
    {
        get
        {
            return gridSizeX * gridSizeY;
        }
    }

    void CreateGrid()
    {
        grid = new Node[gridSizeX, gridSizeY];
        Vector3 worldBottomLeft = transform.position - Vector3.right * gridWorldSize.x/2 - Vector3.forward * gridWorldSize.y/2;
        for (int x=0; x<gridSizeX; x++)
        {
            for (int y = 0; y < gridSizeX; y++)
            {
                Vector3 worldPoint = worldBottomLeft + Vector3.right * (x * nodeDiameter + nodeRadius) + Vector3.forward * (y * nodeDiameter + nodeRadius);
                bool walkable = !(Physics.CheckSphere(worldPoint, nodeRadius, unwalkableMask));

                int movementPenalty = 0;
                int hPenalty = 0;
                int ePenalty = 0;

                if (walkable)
                {
                    Ray ray = new Ray(worldPoint + Vector3.up * 50, Vector3.down);
                    RaycastHit hit;
                    if(Physics.Raycast(ray, out hit, 100, walkableMask))
                    {
                        hPenalty = hit.collider.gameObject.GetComponent<ObjectStats>().hdamage;
                        ePenalty = hit.collider.gameObject.GetComponent<ObjectStats>().edamage;
                        movementPenalty = hPenalty + ePenalty;
                    }
                }
                grid[x, y] = new Node(walkable, worldPoint, x, y, movementPenalty, ePenalty, hPenalty);
            }
        }
    }

    public void UpdateGrid()
    {
        Vector3 worldPoint = new Vector3(0,0,0);
        Vector3 worldBottomLeft = transform.position - Vector3.right * gridWorldSize.x / 2 - Vector3.forward * gridWorldSize.y / 2;
        Node selectedNode = null;
        Ray ray = Camera.main.ScreenPointToRay(Input.mousePosition);
        RaycastHit hit;
        bool walkable = false;
        if (Physics.Raycast(ray, out hit))
        {
            if(hit.collider.gameObject.layer != 10)
            {
                GameObject hitobject = hit.collider.gameObject;
                Destroy(hitobject);
            }
            selectedNode = NodeFromWorldPoint(hit.point);
            worldPoint = worldBottomLeft + Vector3.right * (selectedNode.gridX * nodeDiameter + nodeRadius) + Vector3.forward * (selectedNode.gridY * nodeDiameter + nodeRadius);
            if(obstacle.name == "Seeker")
            {
                //Destroy(GameObject.Find("Seeker(Clone)"));
                //player = obstacle;
                //obstacle.GetComponent<Unit>().target = GameObject.Find("Target(Clone)").transform;
                //obstacle.GetComponent<Unit>().finishedScreen = GameObject.Find("Target(Clone)").transform;
                obstacle.transform.localPosition = worldPoint;
                Vector3 size = new Vector3((60f / gridSizeX) - 0.1f, 6, (60f / gridSizeX) - 0.1f);
                obstacle.transform.localScale = size;
                Instantiate(obstacle, worldPoint, Quaternion.identity, obstacle.transform);
                walkable = !(Physics.CheckSphere(hit.point, nodeRadius, unwalkableMask));
            }
            /*if (obstacle.name == "Target")
            {
                player = GameObject.Find("Seeker(Clone)");
                Destroy(GameObject.Find("Target(Clone)"));
                player.GetComponent<Unit>().target = GameObject.Find("Target(Clone)").transform;
                obstacle.transform.localPosition = worldPoint;
                Vector3 size = new Vector3((60f / gridSizeX) - 0.1f, 6, (60f / gridSizeX) - 0.1f);
                obstacle.transform.localScale = size;
                Instantiate(obstacle, worldPoint, Quaternion.identity, obstacle.transform);
                walkable = !(Physics.CheckSphere(hit.point, nodeRadius, unwalkableMask));
            }*/
            else if (obstacle.name == "Grass")
            {
                if (hit.collider.gameObject.layer != 10)
                {
                    GameObject hitobject = hit.collider.gameObject;
                    Destroy(hitobject);
                    walkable = !(Physics.CheckSphere(hit.point, nodeRadius, unwalkableMask));
                }
            }
            else
            {
                Vector3 size = new Vector3((60f / gridSizeX) - 0.1f, 6, (60f / gridSizeX) - 0.1f);
                obstacle.transform.localScale = size;
                Instantiate(obstacle, worldPoint, Quaternion.identity, obstacle.transform);
                walkable = !(Physics.CheckSphere(hit.point, nodeRadius, unwalkableMask));
            }
        }

        int movementPenalty = 0;
        int hPenalty = 0;
        int ePenalty = 0;

        if (walkable)
        {
            if (Physics.Raycast(ray, out hit, 100, walkableMask))
            {
                hPenalty = hit.collider.gameObject.GetComponent<ObjectStats>().hdamage;
                ePenalty = hit.collider.gameObject.GetComponent<ObjectStats>().edamage;
                movementPenalty = hPenalty + ePenalty;
            }
        }
        grid[selectedNode.gridX, selectedNode.gridY] = new Node(walkable, worldPoint, selectedNode.gridX, selectedNode.gridY, movementPenalty, ePenalty, hPenalty);
    }

    public List<Node> GetNeighbours(Node node)
    {
        List<Node> neighbours = new List<Node>();

        for (int x = -1; x <= 1; x++)
        {
            for (int y = -1; y <= 1; y++)
            {
                if (x == 0 && y == 0)
                {
                    continue;
                }
                int checkX = node.gridX + x;
                int checkY = node.gridY + y;

                if (checkX >= 0 && checkX < gridSizeX && checkY >= 0 && checkY < gridSizeY)
                {
                    neighbours.Add(grid[checkX, checkY]);
                }
            }
        }
        return neighbours;
    }

    public Node NodeFromWorldPoint(Vector3 worldPosition)
    {
        float percentX = (worldPosition.x + gridWorldSize.x / 2) / gridWorldSize.x;
        float percentY = (worldPosition.z + gridWorldSize.y / 2) / gridWorldSize.y;
        percentX = Mathf.Clamp01(percentX);
        percentY = Mathf.Clamp01(percentY);

        int x = Mathf.RoundToInt((gridSizeX - 1) * percentX);
        int y = Mathf.RoundToInt((gridSizeY - 1) * percentY);
        return grid[x, y];
    }

    private void OnDrawGizmos()
    {
        Gizmos.DrawWireCube(transform.position, new Vector3(gridWorldSize.x, 1, gridWorldSize.y));  
        if (grid != null && displayGridGizmos)
        {
            foreach (Node n in grid)
            {
                Ray ray = Camera.main.ScreenPointToRay(Input.mousePosition);
                RaycastHit hit;
                Gizmos.color = (n.walkable) ? Color.white : Color.red;
                if (Physics.Raycast(ray, out hit))
                {
                    Node hoverNode = NodeFromWorldPoint(hit.point);
                    if (hoverNode == n)
                        Gizmos.color = Color.blue;
                }
                Gizmos.DrawCube(n.worldPosition, Vector3.one * (nodeDiameter - .1f));
            }
        }   
    }

    [System.Serializable]
    public class TerrainType
    {
        public LayerMask terrainMask;
        public int energyPenalty;
        public int healthPenalty;
    }
}
